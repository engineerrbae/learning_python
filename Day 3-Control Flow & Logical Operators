##Day 3-Control Flow & Logical Operators

#Control FLow: Decision Making

For this particularly, we use if-else statements which finalises the decision. It is similar to when you have to decide one result out of the two.

Syntax:

if condition:
  pass        -> the decision has to be placed in indentation block.
else condition:  -> condition writing is optional
  print("I am an else block") -> the decision has to be placed in indentation block.

Please note that the if-else are pairs so they both follow the same indentation line. As shown above.

#Comparison Operators:

1. >   ( Greater than )
2. <   ( Less than )  
3. >=  ( Greater than or equal to )
4. =<  ( Less than or equal to )
5. ==  ( Equal to ) -> Checking to see the quality it is not similar to assignment operator (=)
6. !=  ( Not Equal to )

Exercise 3.1: 

## Odd or Even

# Instructions

Write a program that works out whether if a given number is an odd or even number. 

Even numbers can be divided by 2 with no remainder. 

e.g. 86 is **even** because 86 Ã· 2 = 43

43 does not have any decimal places. Therefore the division is clean.

e.g. 59 is **odd** because 59 Ã· 2 = 29.5

29.5 is not a whole number, it has decimal places. Therefore there is a remainder of 0.5, so the division is not clean.

The **modulo** is written as a percentage sign (%) in Python. It gives you the remainder after a division. 

e.g. 

6 Ã· 2 = 3 with no remainder. 

```
6 % 2 = 0
```

5 Ã· 2 = 2 x **2** + 1, remainder is 1.

```
5 % 2 = 1
```

14 Ã· 4 = 3 x **4** + 2, remainder is 2.

```
14 % 4 = 2

SOlution:

# ðŸš¨ Don't change the code below ðŸ‘‡
number = int(input("Which number do you want to check? "))
# ðŸš¨ Don't change the code above ðŸ‘†

#First *fork* your copy. Then copy-paste your code below this line ðŸ‘‡
#Finally click "Run" to execute the tests

if (number%2==0):
  print("This is an even number.")
else:
  print("This is an odd number.")
  
#Nested if-else

if condition: ( This has to be true in order to go to the next conditional block of if else )
 if condition:
   pass
 else:
   print("do this")
else condition:
  print("do this")

## BMI Calculator 2.0

# Instructions

Write a program that interprets the Body Mass Index (BMI) based on a user's weight and height.

It should tell them the interpretation of their BMI based on the BMI value.

- Under 18.5 they are underweight
- Over 18.5 but below 25 they have a normal weight
- Over 25 but below 30 they are slightly overweight
- Over 30 but below 35 they are obese
- Above 35 they are clinically obese.

![](https://cdn.fs.teachablecdn.com/qTOp8afxSkGfU5YGYf36)

The BMI is calculated by dividing a person's weight (in kg) by the square of their height (in m):

![](https://cdn.fs.teachablecdn.com/jKHjnLrNQjqzdz3MTMyv)

**Warning** you should **round** the result to the nearest whole number. The interpretation message needs to include the words in bold from the interpretations above. e.g. **underweight, normal weight,  overweight, obese, clinically obese**. 

# Example Input

```
weight = 85
```

```
height = 1.75
```

# Example Output

85 Ã· 1.75 x 1.75 =  27.755102040816325

```
Your BMI is 28, you are slightly overweight.
```

Solution:

# ðŸš¨ Don't change the code below ðŸ‘‡
height = float(input("enter your height in m: "))
weight = float(input("enter your weight in kg: "))
# ðŸš¨ Don't change the code above ðŸ‘†

#First *fork* your copy. Then copy-paste your code below this line ðŸ‘‡
#Finally click "Run" to execute the tests

BMI = round(weight / height**2)

if(BMI<18.5):
  print(f'Your BMI is {BMI}, you are underweight.')
elif(BMI<25):
  print(f'Your BMI is {BMI}, you have a normal weight.')
elif(BMI < 30):
  print(f'Your BMI is {BMI}, you are slightly overweight.')
elif(BMI<35):
  print(f'Your BMI is {BMI}, you are obese.')
else:
  print(f'Your BMI is {BMI}, you are clinically obese.')

--------------------------------------------------------------------

## Leap Year

# ðŸ’ªThis is a Difficult Challenge ðŸ’ª

# Instructions

Write a program that works out whether if a given year is a leap year. A normal year has 365 days, leap years have 366, with an extra day in February. The reason why we have leap years is really fascinating, this video does it more justice:

[https://www.youtube.com/watch?v=xX96xng7sAE](https://www.youtube.com/watch?v=xX96xng7sAE)

This is how you work out whether if a particular year is a leap year. 

> `on every year that is evenly divisible by 4
>   **except** every year that is evenly divisible by 100
>     **unless** the year is also evenly divisible by 400`

e.g. The year 2000:

2000 Ã· 4 = 500 (Leap)

2000 Ã· 100 = 20 (Not Leap)

2000 Ã· 400 = 5 (Leap!)

So the year 2000 is a leap year.

But the year 2100 is not a leap year because:

2100 Ã·  4 = 525 (Leap)

2100 Ã· 100 = 21 (Not Leap)

2100 Ã· 400 = 5.25 (Not Leap)

**Warning** your output should match the Example Output format exactly, even the positions of the commas and full stops. 

# Example Input 1

```
2400
```

# Example Output 1

```
Leap year.
```

# Example Input 2

```
1989
```

# Example Output 2

```
Not leap year.
```

Solution:

# ðŸš¨ Don't change the code below ðŸ‘‡
year = int(input("Which year do you want to check? "))
# ðŸš¨ Don't change the code above ðŸ‘†

#Write your code below this line ðŸ‘‡

#mylogic

if(year%4==0 and year%400==0): #checking for two zeros behind no. 2000 1900
    print("Leap year.")
elif(year%4==0 and year%100!=0): #checking for normal no. e.g 2020 2021
    print("Leap year.")
else:
    print("Not leap year.")

# #herlogic

# if(year%4==0):
#   if(year%100==0):
#     if(year%400==0):
#       print("Leap year.")
#     else:
#       print("Not leap year.")
#   else:
#     print("Not leap year.")
# else:
#   print("Not leap year.")


------------------------------------------------------

New Challenge: Day3-5

You are going to write a program that tests the compatibility between two people. We're going to use the super scientific method recommended by BuzzFeed.

To work out the love score between two people:

Take both people's names and check for the number of times the letters in the word TRUE occurs. Then check for the number of times the letters in the word LOVE occurs. Then combine these numbers to make a 2 digit number.

This BuzzFeed article gives more details on this:

https://www.buzzfeed.com/ariannarebolini/what-are-the-chances-your-crush-is-actually-your-true-love

For Love Scores less than 10 or greater than 90, the message should be:

"Your score is **x**, you go together like coke and mentos."

For Love Scores between 40 and 50, the message should be:

"Your score is **y**, you are alright together."

Otherwise, the message will just be their score. 

Solution: 

# ðŸš¨ Don't change the code below ðŸ‘‡
print("Welcome to the Love Calculator!")
name1 = input("What is your name? \n")
name2 = input("What is their name? \n")
# ðŸš¨ Don't change the code above ðŸ‘†

#First *fork* your copy. Then copy-paste your code below this line ðŸ‘‡
#Finally click "Run" to execute the tests

#converting both the names to lowercase
#helpful in counting truelove easily
name1lower=name1.lower()
name2lower=name2.lower()

#counting for her name
T=name1lower.count('t')
R=name1lower.count('r')
U=name1lower.count('u')
E=name1lower.count('e')
L=name1lower.count('l')
O=name1lower.count('o')
V=name1lower.count('v')
E=name1lower.count('e')

#counting for his name
T1=name2lower.count('t')
R1=name2lower.count('r')
U1=name2lower.count('u')
E1=name2lower.count('e')
L1=name2lower.count('l')
O1=name2lower.count('o')
V1=name2lower.count('v')
E1=name2lower.count('e')

sum1=T+R+U+E+T1+R1+U1+E1
sum=L+O+V+E+L1+O1+V1+E1

score= str(sum1)+str(sum) #type conversion to string to concatenate 2 numbers
score=int(score) #conversion to int for conditions in if statements

if(score<10 or score>90):
  print(f"Your score is {score}, you go together like coke and mentos.")
elif(score>=40 and score<=50):
  print(f"Your score is {score}, you are alright together.")
else:
  print(f"Your score is {score}.")
