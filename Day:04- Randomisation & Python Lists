 #Randomisation & Python Lists
 
 Randomness & quirky is useful when comes to gaming enviornment. It makes the games interesting.
 
 There's a whole bunch of maths that can be applied to create what are called a pseudo-random number generators.
 And the one that Python uses is something called the Mersenne Twister.
 
 #int random no.
 
 import random # this library stores the module random logic
 
 r=random.randint(0,1) #It will show random no. in between 0 & 1
 print(r)
 
 #floating point random number
 
 import random
 
r= random.random() #It will show random no. in between 0 & 1 but not including 1
 print(r)
 
 #show the random no. in between 0 to 5
 
 r=random.random() #It will show random no. in between 0 & 1 but not including 1
 r=r*5
 print(r)
 
 2. LISTS: Collection of data within square brackets which has a certain relationship with each other. Just like states in India comes under state relation. 
 list is what you would call a data structure.
 
It's just a set of square brackets with many items stored inside.And those items can be any data type. They can even have mixed data types like
you could store strings together with numbers or a set of booleans.It doesn't really matter.But what does matter is the syntax. 

In Python lists always start with a open square bracket and a closing square bracket.And then in between you have your items separated by a comma.
So pretty simple. In order to store it inside the variable,then its the same way as we've done before.

The only difference is the right hand side of the equal sign.This is the list data structure.

If we stored a bunch of fruits, for example,than it might look something like this: Cherry, Apple, Pear, separated by a comma inside a set of square brackets.

fruits = [Cherry,Apple,Pear]

---> Who's Paying: Exercise: Day-4-2

Instructions:
You are going to write a program which will select a random name from a list of names. The person selected will have to pay for everybody's food bill.

Important: You are not allowed to use the choice() function.

Line 8 splits the string names_string into individual names and puts them inside a List called names. For this to work, you must enter all the names as name followed by comma then space. e.g. name, name, name

Example Input
Angela, Ben, Jenny, Michael, Chloe
Angela, Ben, Jenny, Michael, Chloe
Note: notice that there is a space between the comma and the next name.

Example Output
Michael is going to buy the meal today!


Solutions:

solution 1:

import random
names_string = input("Give me everybody's names, separated by a comma. ")
names = names_string.split(", ")

b = random.sample(names, 1)
print(*b,"is going to buy the meal today!")

Additional Notes:

#The work of random.sample(population,k) is it selects the random item from the list 'names' & output the 1 item. K, can be of any length but equal to
#the length of the existing list(here as equal to the size of names list).
 #The work of star(*) is to unpack the list and return every element present in the list.

solution 2:

# Split string method
import random
names_string = input("Give me everybody's names, separated by a comma. ")
names = names_string.split(", ")

length=len(names)
random_list = random.randint(0,length - 1)

print(names[random_list],"is going to pay for the meal today!")

----------------------------------------

Nested List:

We can add list in a list to store two or more related lists at one place.

fruits=[pears,apple,orange]
vegetable=[bittergourd,ladyfinger,cauliflower,peas]

dirt_dozens=[fruits,vegetables]

here, fruits is at index 0 & vegetables is at index 1.

Question 1:
Given the following list:

fruits = ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Pears"]
Which line of code will give you "Apples"?

Ans. print(fruits[-5])

Question 2:
Given the code below:

fruits = ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Pears"]
fruits[-1] = "Melons"
fruits.append("Lemons")
print(fruits)
What do you think will be printed?

Ans. ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Melons", "Lemons"]


Question 3:
Given the code below:

fruits = ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Pears"]
vegetables = ["Spinach", "Kale", "Tomatoes", "Celery", "Potatoes"]
 
dirty_dozen = [fruits, vegetables]
 
print(dirty_dozen[1][1])
What will be printed?

Ans. Kale

Explanation:

fruits = ["Strawberries", "Nectarines", "Apples", "Grapes", "Peaches", "Cherries", "Pears"]
vegetables = ["Spinach", "Kale", "Tomatoes", "Celery", "Potatoes"]
 
dirty_dozen = [fruits, vegetables]
print(dirty_dozen[0])
print(dirty_dozen[1])
print(dirty_dozen[1][2])
print(dirty_dozen[1][3])
print(dirty_dozen[1][1])

Output:

['Strawberries', 'Nectarines', 'Apples', 'Grapes', 'Peaches', 'Cherries', 'Pears']
['Spinach', 'Kale', 'Tomatoes', 'Celery', 'Potatoes']
Tomatoes
Celery
Kale

-------------------------------------------------------
Project: Treasure Map


Instructions
You are going to write a program which will mark a spot with an X.

In the starting code, you will find a variable called map.

This map contains a nested list.
When map is printed this is what the nested list looks like:

['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️']
In the starting code, we have used new lines (\n) to format the three rows into a square, like this:

['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
This is to try and simulate the coordinates on a real map.



Your job is to write a program that allows you to mark a square on the map using a two-digit system. The first digit is the vertical column number and the second digit is the horizontal row number. e.g.:

https://cdn.fs.teachablecdn.com/2vnboIYTFFruvl9FJ2w5

First your program must take the user input and convert it to a usable format.

Next, you need to use it to update your nested list with an "x".

Example Input 1
column 2, row 3 would be entered as:

23
23
Example Output 1
['⬜️', '⬜️', '⬜️']

['⬜️', '⬜️', '⬜️']

['⬜️', 'X', '⬜️']
['⬜️', '⬜️', '⬜️']

['⬜️', '⬜️', '⬜️']

['⬜️', 'X', '⬜️']
Example Input 2
column 3, row 1 would be entered as:

31
31
Example Output 2
['⬜️', '⬜️', 'X']

['⬜️', '⬜️', '⬜️']

['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', 'X']

['⬜️', '⬜️', '⬜️']

['⬜️', '⬜️', '⬜️']
e.g. When you hit run, this is what should happen:


Hint
Remember that Lists start at index 0!
map is just a variable that contains a nested list. It's not related to the map function in Python.

Solution:

-> What I did:

row1 = ["⬜️","⬜️","⬜️"]
row2 = ["⬜️","⬜️","⬜️"]
row3 = ["⬜️","⬜️","⬜️"]
map = [row1, row2, row3]
print(f"{row1}\n{row2}\n{row3}")
position = input("Where do you want to put the treasure? ")



pos=str(position)
index0=int(pos[0])
index1=int(pos[1])


if index0==0 or index0==1: #column
  if index1==0 or index1==1: #row
     row1[0] = position
  elif index1==1 or index1==2:
    row1[1] = position
  else:
    row1[2]=position


if index0==2: #column
  if index1==0 or index1==1: #row
     row2[0] = position
  elif index1==1 or index1==2:
    row2[1] = position
  else:
    row2[2]=position


if index0==3: #column
  if index1==0 or index1==1: #row
     row3[0] = position
  elif index1==1 or index1==2:
    row3[1] = position
  else:
    row3[2]=position
    
print(f"{row1}\n{row2}\n{row3}")

output:

['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
Where do you want to put the treasure? 22
['⬜️', '⬜️', '⬜️']
['⬜️', '22', '⬜️']
['⬜️', '⬜️', '⬜️']

---------------------------------
MAIN SOLUTION:

row1 = ["⬜️","️⬜️","️⬜️"]
row2 = ["⬜️","⬜️","️⬜️"]
row3 = ["⬜️️","⬜️️","⬜️️"]
map = [row1, row2, row3]
print(f"{row1}\n{row2}\n{row3}")

position = input("Where do you want to put the treasure? ")

horizontal = int(position[0])
vertical = int(position[1])

map[vertical - 1][horizontal - 1] = "X"
print(f"{row1}\n{row2}\n{row3}")
output:



['⬜️', '️⬜️', '️⬜️']
['⬜️', '⬜️', '️⬜️']
['⬜️️', '⬜️️', '⬜️️']
Where do you want to put the treasure? 11
['X', '️⬜️', '️⬜️']
['⬜️', '⬜️', '️⬜️']
['⬜️️', '⬜️️', '⬜️️']
